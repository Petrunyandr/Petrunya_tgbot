import logging
import random
import uuid

import telebot as t
from telebot import types

from config import BOT_TOKEN, VERSION
from db import Database

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)


class Bot:
    def __init__(self):
        self.bot = t.TeleBot(BOT_TOKEN)
        self.db = Database()
        self.temp_photos = {}  # –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        self.setup_commands()
        self.setup_callbacks()

    def setup_commands(self):
        self.bot.set_my_commands(
            [
                types.BotCommand("start", "–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üòÅ"),
                types.BotCommand("list", "—Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ üñºÔ∏è"),
                types.BotCommand("photo", "—Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ üé≤"),
            ]
        )

        self.bot.message_handler(commands=["start"])(self.start)
        self.bot.message_handler(commands=["list"])(self.list_photos)
        self.bot.message_handler(commands=["photo"])(self.send_random_photo)
        self.bot.message_handler(content_types=["photo"])(self.confirm_photo)


    def start(self, message):
        self.bot.send_message(
            message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üñºÔ∏è"
        )

    def confirm_photo(self, message):
        photo = message.photo[-1]  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = photo.file_id

        if self.db.photo_exists(file_id):
            self.bot.send_message(message.chat.id, "–≠—Ç–æ —Ñ–æ—Ç–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ!")
            return

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è –∫–Ω–æ–ø–∫–∏
        short_id = str(uuid.uuid4())
        self.temp_photos[short_id] = {
            "file_id": file_id,
            "username": message.from_user.username or "Unknown",
            "caption": message.caption or "",
        }

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{short_id}"
            ),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{short_id}"),
        )

        self.bot.send_message(
            message.chat.id,
            f"–í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É?\n\n{message.caption or ''}",
            reply_markup=markup,
        )

    def send_random_photo(self, message):
        photos = self.db.get_photos()
        if not photos:
            self.bot.send_message(message.chat.id, "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ üò¢")
            return
        chosen = random.choice(photos)
        self.bot.send_photo(
            chat_id=message.chat.id,
            photo=chosen["file_id"],
            caption=f"–û—Ç {chosen['username']} ({chosen['date'][:16]})",
        )

    def setup_callbacks(self):
        @self.bot.callback_query_handler(
            func=lambda call: call.data.startswith(("save_", "cancel_"))
        )
        def handle_callback(call):
            action, short_id = call.data.split("_", 1)
            if short_id not in self.temp_photos:
                self.bot.answer_callback_query(call.id, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–µ–∫")
                return

            data = self.temp_photos.pop(short_id)
            file_id = data["file_id"]
            username = data["username"]

            if action == "save":
                try:
                    self.db.add_photo(file_id, "", username)
                    self.bot.edit_message_text(
                        "–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ",
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
                    self.bot.edit_message_text(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ :(",
                        chat_id=call.message.chat.id,
                        message_id=call.message.message_id,
                    )
            else:
                self.bot.edit_message_text(
                    "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–æ ‚ùå",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                )

    def list_photos(self, message):
        try:
            photos = self.db.get_photos()
            if not photos:
                self.bot.send_message(message.chat.id, "–í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ üò¢")
                return

            text = "üñºÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ:\n\n"
            for i, p in enumerate(photos, 1):
                text += f"{i}. {p['file_id']} ‚Äî {p['username']} ({p['date'][:16]})\n"

            self.bot.send_message(message.chat.id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ.")

    def run(self):
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)")
        try:
            self.bot.delete_webhook()
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")
        try:
            self.bot.send_message(
                -1002515025726, f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –í–µ—Ä—Å–∏—è {VERSION}"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        self.bot.infinity_polling(skip_pending=True)


if __name__ == "__main__":
    Bot().run()
