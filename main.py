import logging
import random

import telebot as t
from telebot import types

from db import Database
from config import *

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)


class Bot:
    def __init__(self):
        self.bot = t.TeleBot(BOT_TOKEN)
        self.db = Database()
        self.setup_commands()

    def setup_commands(self):
        self.bot.set_my_commands(
            [
                types.BotCommand("start", "–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üòÅ"),
                types.BotCommand("music", "–ø–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É üéµ"),
                types.BotCommand("list", "—Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ üìú"),
            ]
        )

        self.bot.message_handler(commands=["start"])(self.start)
        self.bot.message_handler(commands=["music"])(self.send_random_music)
        self.bot.message_handler(commands=["list"])(self.list_tracks)
        self.bot.message_handler(content_types=["audio", "voice"])(self.get_file_id)

        self.bot.message_handler(
            func=lambda m: m.text.lower() in ("–ø—Ä", "–∫—É", "qq", "pr", "qu", "ku")
        )(self.ku)
        self.bot.message_handler(
            func=lambda m: m.text.lower() in ("—Å–ø—Å", "—Å–ø–∞—Å–∏–±–æ", "–æ —Å–ø—Å")
        )(self.sps)
        self.bot.message_handler(
            func=lambda m: m.text.lower()
            in ("–µ–±–∞–ª–æ", "–≤–∞–ª—å–Ω–∏ –µ–±–∞–ª–æ", "–∑–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ", "–µ–±–ª–æ")
        )(self.ebalo)
        self.bot.message_handler(
            func=lambda m: m.text.lower()
            in (
                "–∏–¥–∏ –Ω–∞—Ö—É–π",
                "–∏–¥–∏ –Ω–∞—Ö—É—Ü",
                "–∏–¥–∏ –Ω–∞–∑—É–π",
                "–∏–¥–∏ –≤ –ø–∏–∑–¥—É",
                "–∏–¥–∏ –≤ –ø–∏–∑–¥—Ü",
                "–Ω–∞—Ö—É–π –∏–¥–∏",
                "–Ω–∞–∑—É–π –∏–¥–∏",
            )
        )(self.mneme)
        self.bot.message_handler(func=lambda m: m.text.lower() in ["—Å–æ—Ä–∏", "—Å–æ—Ä—è–Ω", "–ø—Ä–æ—Å—Ç–∏"])(
            self.jdnd
        )
        self.bot.message_handler(func=lambda m: m.text.lower() == "–∞–ª–µ")(self.ale)

    def start(self, message):
        self.bot.send_message(
            message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /music, —á—Ç–æ–±—ã –ø–æ—Å–ª—É—à–∞—Ç—å –º—É–∑—ã–∫—É üéß"
        )

    def get_file_id(self, message):
        audio = message.audio or message.voice
        if not audio:
            return

        if message.audio:
            title = audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            performer = audio.performer or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
        else:
            title = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            performer = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        if not self.db.track_exists(audio.file_id):
            try:
                self.db.add_track(audio.file_id, title, performer, audio.duration)
                logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Ç—Ä–µ–∫ {title} - {performer}")
                self.bot.send_message(message.chat.id, f"–¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: {e}")
                self.bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–∫ :(")
        else:
            self.bot.send_message(message.chat.id, "–§–∞–π–ª —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

    def list_tracks(self, message):
        try:
            tracks = self.db.get_tracks()
            if not tracks:
                self.bot.send_message(message.chat.id, "–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ üò¢")
                return

            text = "üéµ –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤:\n\n"
            for i, tr in enumerate(tracks, 1):
                text += f"{i}. {tr['title']} ‚Äî {tr['performer']}\n"

            self.bot.send_message(message.chat.id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤: {e}")
            self.bot.send_message(
                message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–∫–æ–≤."
            )

    def send_random_music(self, message):
        try:
            tracks = self.db.get_tracks()
            if not tracks:
                self.bot.send_message(message.chat.id, "–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤ üò¢")
                return

            chosen_track = random.choice(tracks)
            self.bot.send_audio(
                chat_id=message.chat.id,
                audio=chosen_track["track_id"],
                title=chosen_track["title"],
                performer=chosen_track["performer"],
                duration=chosen_track["duration"],
                caption="–ª—É—Ç–∞–π",
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º—É–∑—ã–∫–∏: {e}")
            self.bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º—É–∑—ã–∫–∏.")

    def ku(self, message):
        self.bot.send_message(message.chat.id, "–û–û–û–û–û –ü–†")

    def sps(self, message):
        self.bot.send_message(message.chat.id, "–Ω–µ–∑")

    def ebalo(self, message):
        self.bot.send_message(message.chat.id, "—Å–∞–º")

    def mneme(self, message):
        self.bot.send_message(message.chat.id, "–Ω–µ –±—É–¥—Éü§£ü§£ü§£")

    def jdnd(self, message):
        self.bot.send_message(message.chat.id, "–ø—Ä–æ—â–æ–Ω")

    def ale(self, message):
        self.bot.send_message(message.chat.id, "—Ç—É–¥–∞")
    
    def shaverma(self, message):
        self.bot.send_message(message.chat.id, "–õ–ï–ï–ï–ï–ï –ë–†–ê–¢–ö–ê –î–ï–†–ñ–ò")

    def run(self):
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (polling)")
        try:
            self.bot.send_message(-1002515025726, f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –í–µ—Ä—Å–∏—è {VERSION}")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        self.bot.infinity_polling(skip_pending=True)


if __name__ == "__main__":
    Bot().run()
